/******************************************************************************
 * This file was generated by langium-cli 3.1.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, Reference, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const LarcTerminals = {
    WS: /\s+/,
    ID: /[_a-zA-Z][\w_]*/,
    INT: /[0-9]+/,
    STRING: /"(\\.|[^"\\])*"|'(\\.|[^'\\])*'/,
    REL: /[-<>=:]+/,
    ML_COMMENT: /\/\*[\s\S]*?\*\//,
    SL_COMMENT: /\/\/[^\n\r]*/,
};

export type Model = Architecture | Relations;

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Architecture extends AstNode {
    readonly $type: 'Architecture';
    attrs?: Attributes;
    nodes: Array<ArchNode>;
    title?: string;
}

export const Architecture = 'Architecture';

export function isArchitecture(item: unknown): item is Architecture {
    return reflection.isInstance(item, Architecture);
}

export interface ArchNode extends AstNode {
    readonly $container: ArchNode | Architecture;
    readonly $type: 'ArchNode';
    attrs?: Attributes;
    name: string;
    nodes: Array<ArchNode>;
    title?: string;
}

export const ArchNode = 'ArchNode';

export function isArchNode(item: unknown): item is ArchNode {
    return reflection.isInstance(item, ArchNode);
}

export interface Attribute extends AstNode {
    readonly $container: Attributes;
    readonly $type: 'Attribute';
    name: string;
    value: number | string;
}

export const Attribute = 'Attribute';

export function isAttribute(item: unknown): item is Attribute {
    return reflection.isInstance(item, Attribute);
}

export interface Attributes extends AstNode {
    readonly $container: ArchNode | Architecture | OneRel;
    readonly $type: 'Attributes';
    attrs: Array<Attribute>;
}

export const Attributes = 'Attributes';

export function isAttributes(item: unknown): item is Attributes {
    return reflection.isInstance(item, Attributes);
}

export interface OneRel extends AstNode {
    readonly $container: Relations;
    readonly $type: 'OneRel';
    attrs?: Attributes;
    from: Reference<ArchNode>;
    rel: string;
    to: Reference<ArchNode>;
}

export const OneRel = 'OneRel';

export function isOneRel(item: unknown): item is OneRel {
    return reflection.isInstance(item, OneRel);
}

export interface Relations extends AstNode {
    readonly $type: 'Relations';
    rels: Array<OneRel>;
}

export const Relations = 'Relations';

export function isRelations(item: unknown): item is Relations {
    return reflection.isInstance(item, Relations);
}

export type LarcAstType = {
    ArchNode: ArchNode
    Architecture: Architecture
    Attribute: Attribute
    Attributes: Attributes
    Model: Model
    OneRel: OneRel
    Relations: Relations
}

export class LarcAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [ArchNode, Architecture, Attribute, Attributes, Model, OneRel, Relations];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case Architecture:
            case Relations: {
                return this.isSubtype(Model, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'OneRel:from':
            case 'OneRel:to': {
                return ArchNode;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case Architecture: {
                return {
                    name: Architecture,
                    properties: [
                        { name: 'attrs' },
                        { name: 'nodes', defaultValue: [] },
                        { name: 'title' }
                    ]
                };
            }
            case ArchNode: {
                return {
                    name: ArchNode,
                    properties: [
                        { name: 'attrs' },
                        { name: 'name' },
                        { name: 'nodes', defaultValue: [] },
                        { name: 'title' }
                    ]
                };
            }
            case Attribute: {
                return {
                    name: Attribute,
                    properties: [
                        { name: 'name' },
                        { name: 'value' }
                    ]
                };
            }
            case Attributes: {
                return {
                    name: Attributes,
                    properties: [
                        { name: 'attrs', defaultValue: [] }
                    ]
                };
            }
            case OneRel: {
                return {
                    name: OneRel,
                    properties: [
                        { name: 'attrs' },
                        { name: 'from' },
                        { name: 'rel' },
                        { name: 'to' }
                    ]
                };
            }
            case Relations: {
                return {
                    name: Relations,
                    properties: [
                        { name: 'rels', defaultValue: [] }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new LarcAstReflection();
