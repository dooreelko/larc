import { AstNodeDescription, AstUtils, DefaultScopeComputation, LangiumDocument, type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { LarcGeneratedModule, LarcGeneratedSharedModule } from './generated/module.js';
import { LarcValidator, registerValidationChecks } from './larc-validator.js';
import { isArchNode } from './generated/ast.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type LarcAddedServices = {
    validation: {
        LarcValidator: LarcValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type LarcServices = LangiumServices & LarcAddedServices

/*
In LARC all identifiers must be unique so that they could be referred to from the global scope
*/
export class GlobalScopeComputation extends DefaultScopeComputation {

    constructor(services: LangiumServices) {
        super(services);
    }

    override async computeExports(document: LangiumDocument): Promise<AstNodeDescription[]> {
        const exportedDescriptions: AstNodeDescription[] = [];
        for (const childNode of AstUtils.streamAllContents(document.parseResult.value)) {
            if (isArchNode(childNode)) {
                const fullyQualifiedName = childNode.name;
                // `descriptions` is our `AstNodeDescriptionProvider` defined in `DefaultScopeComputation`
                // It allows us to easily create descriptions that point to elements using a name.
                exportedDescriptions.push(this.descriptions.createDescription(childNode, fullyQualifiedName, document));
            }
        }
        return exportedDescriptions;
    }
}

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const LarcModule: Module<LarcServices, PartialLangiumServices & LarcAddedServices> = {
    references: {
        ScopeComputation: (services) => new GlobalScopeComputation(services)
    },
    validation: {
        LarcValidator: () => new LarcValidator()
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createLarcServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    Larc: LarcServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        LarcGeneratedSharedModule
    );
    const Larc = inject(
        createDefaultModule({ shared }),
        LarcGeneratedModule,
        LarcModule
    );
    shared.ServiceRegistry.register(Larc);
    registerValidationChecks(Larc);
    if (!context.connection) {
        // We don't run inside a language server
        // Therefore, initialize the configuration provider instantly
        shared.workspace.ConfigurationProvider.initialized({});
    }
    return { shared, Larc };
}
